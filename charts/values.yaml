replicaCount: 1
image:
  repository: ${CI_REGISTRY_IMAGE}
  pullPolicy: Always
  tag: ${PROJECT_RELEASE_VERSION}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a services account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the services account
  annotations: {}
  # The name of the services account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 1Gi

livenessProbe:
  httpGet:
    path: "/actuator/health/liveness"
    port: http
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 10
readinessProbe:
  httpGet:
    path: "/actuator/health/readiness"
    port: http
  initialDelaySeconds: 120
  periodSeconds: 5
  failureThreshold: 10

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: spring-config
    configMap:
      name: authentication-provider-spring-configmap

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: spring-config
    mountPath: /config/

envFrom:
  - configMapRef:
      name: authentication-provider-configmap

nodeSelector: {}

tolerations: []

affinity: {}

db:
  url: "jdbc:postgresql://postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/authenticationprovider"
  username: "authenticationprovider"
  password: "authenticationprovider"
  cipherSecret: "authenticationprovider-db-cipher-secret"

redis:
  host: "redis-master.{{ .Release.Namespace }}.svc.cluster.local"
  port: "6379"
  username: "default"
  password: "admin"

keypair:
  signatureAlgorithm: "SHA256withECDSA"
  algorithm: "ECDSA"
  keyLength: 256

microservices:
  usersRolesUrl: http://users-roles.{{ .Release.Namespace }}.svc.cluster.local:8080
  identityProviderUrl: http://identity-provider.{{ .Release.Namespace }}.svc.cluster.local:8080

#Kafka configuration, this is only an example!
#  kafkaConfig:
#    spring:
#      kafka:
#        bootstrap-servers: <your-kafka-url>
#        producer:
#          properties:
#            security.protocol: SASL_PLAINTEXT
#            sasl.mechanism: PLAIN
#            sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_USER:admin" password="${KAFKA_PASSWORD:admin-location}";
#        admin:
#          auto-create: true
#    simpl:
#      kafka:
#        topic:
#          prefix: iaa.{{ .Release.Namespace }}.
kafkaConfig: {}

#path of extra config to add to the deploy, separated by comma
extraConfigImport: /config/kafka.yml, /config/vault.yml

simpl:
  certificate:
    san: <your-t2-fqdn>

profile: # authority / participant

security:
  location: database # database / vault

#vaultConfig:
#  vault:
#    uri: [VAULT_URI]
#    secretEngine: location
#    basePath: authenticationprovider
#    authentication:
#      path: approle
#      roleId: [ROLE_ID]
#      secretId: [SECRET_ID]
vaultConfig: {}

urlAuthorityT2: # T2 url of the authority

devMode: false